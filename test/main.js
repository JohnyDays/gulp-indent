// Generated by CoffeeScript 1.7.1
(function() {
  var es, fs, gutil, indent, should;

  fs = require("fs");

  es = require("event-stream");

  should = require("should");

  require("mocha");

  delete require.cache[require.resolve("../")];

  gutil = require("gulp-util");

  indent = require("../");

  describe("gulp-indent", function() {
    var expectedFiles;
    expectedFiles = {
      spaces: new gutil.File({
        path: "test/expected/spaces.txt",
        cwd: "test/",
        base: "test/expected",
        contents: fs.readFileSync("test/expected/spaces.txt")
      }),
      tabs: new gutil.File({
        path: "test/expected/tabs.txt",
        cwd: "test/",
        base: "test/expected",
        contents: fs.readFileSync("test/expected/tabs.txt")
      })
    };
    it("should produce expected files via buffer", function(done) {
      var origin_file, space_stream;
      origin_file = new gutil.File({
        path: "test/fixtures/origin.txt",
        cwd: "test/",
        base: "test/fixtures",
        contents: fs.readFileSync("test/fixtures/origin.txt")
      });
      space_stream = indent();
      space_stream.on("error", function(err) {
        should.exist(err);
        done(err);
      });
      space_stream.on("data", function(newFile) {
        var tab_stream;
        should.exist(newFile);
        should.exist(newFile.contents);
        String(newFile.contents).should.equal(String(expectedFiles.spaces.contents));
        tab_stream = indent({
          tabs: true
        });
        tab_stream.on("error", function(err) {
          should.exist(err);
          done(err);
        });
        tab_stream.on("data", function(newFile) {
          should.exist(newFile);
          should.exist(newFile.contents);
          String(newFile.contents).should.equal(String(expectedFiles.tabs.contents));
          done();
        });
        origin_file.contents = fs.readFileSync("test/fixtures/origin.txt");
        tab_stream.write(origin_file);
        return tab_stream.end();
      });
      space_stream.write(origin_file);
      space_stream.end();
    });
    it("should error on stream", function(done) {
      var srcFile, stream;
      srcFile = new gutil.File({
        path: "test/fixtures/origin.txt",
        cwd: "test/",
        base: "test/fixtures",
        contents: fs.createReadStream("test/fixtures/origin.txt")
      });
      stream = indent();
      stream.on("error", function(err) {
        should.exist(err);
        done();
      });
      stream.on("data", function(newFile) {
        newFile.contents.pipe(es.wait(function(err, data) {
          done(err);
        }));
      });
      stream.write(srcFile);
      stream.end();
    });
  });

}).call(this);
